// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookings_guests.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBookingGuest = `-- name: CreateBookingGuest :one
INSERT INTO
    booking_guests (booking_id, guest_id)
VALUES
    ($1, $2) RETURNING booking_guest_id, booking_id, guest_id
`

type CreateBookingGuestParams struct {
	BookingID uuid.NullUUID `json:"booking_id"`
	GuestID   uuid.NullUUID `json:"guest_id"`
}

func (q *Queries) CreateBookingGuest(ctx context.Context, arg CreateBookingGuestParams) (BookingGuest, error) {
	row := q.db.QueryRowContext(ctx, createBookingGuest, arg.BookingID, arg.GuestID)
	var i BookingGuest
	err := row.Scan(&i.BookingGuestID, &i.BookingID, &i.GuestID)
	return i, err
}

const listBookingsByGuest = `-- name: ListBookingsByGuest :many
SELECT b.booking_id, b.room_id, b.check_in_date, b.check_out_date, b.status
FROM booking_guests bg
JOIN bookings b ON bg.booking_id = b.booking_id
WHERE bg.guest_id = $1
`

type ListBookingsByGuestRow struct {
	BookingID    uuid.UUID     `json:"booking_id"`
	RoomID       uuid.NullUUID `json:"room_id"`
	CheckInDate  time.Time     `json:"check_in_date"`
	CheckOutDate time.Time     `json:"check_out_date"`
	Status       string        `json:"status"`
}

func (q *Queries) ListBookingsByGuest(ctx context.Context, guestID uuid.NullUUID) ([]ListBookingsByGuestRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookingsByGuest, guestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsByGuestRow
	for rows.Next() {
		var i ListBookingsByGuestRow
		if err := rows.Scan(
			&i.BookingID,
			&i.RoomID,
			&i.CheckInDate,
			&i.CheckOutDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGuestsByBooking = `-- name: ListGuestsByBooking :many
SELECT
    g.first_name,
    g.last_name,
    g.phone
FROM
    booking_guests bg
    JOIN guests g ON bg.guest_id = g.guest_id
WHERE
    bg.booking_id = $1
`

type ListGuestsByBookingRow struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Phone     sql.NullString `json:"phone"`
}

func (q *Queries) ListGuestsByBooking(ctx context.Context, bookingID uuid.NullUUID) ([]ListGuestsByBookingRow, error) {
	rows, err := q.db.QueryContext(ctx, listGuestsByBooking, bookingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGuestsByBookingRow
	for rows.Next() {
		var i ListGuestsByBookingRow
		if err := rows.Scan(&i.FirstName, &i.LastName, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
