// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hotels.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createHotel = `-- name: CreateHotel :one
INSERT INTO hotels (name, address)
VALUES ($1, $2)
RETURNING hotel_id, name, address
`

type CreateHotelParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

func (q *Queries) CreateHotel(ctx context.Context, arg CreateHotelParams) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, createHotel, arg.Name, arg.Address)
	var i Hotel
	err := row.Scan(&i.HotelID, &i.Name, &i.Address)
	return i, err
}

const deleteHotel = `-- name: DeleteHotel :one
DELETE FROM hotels WHERE hotel_id = $1
RETURNING hotel_id
`

func (q *Queries) DeleteHotel(ctx context.Context, hotelID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteHotel, hotelID)
	var hotel_id uuid.UUID
	err := row.Scan(&hotel_id)
	return hotel_id, err
}

const getHotelById = `-- name: GetHotelById :one
SELECT hotel_id, name, address FROM hotels WHERE hotel_id = $1
`

func (q *Queries) GetHotelById(ctx context.Context, hotelID uuid.UUID) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, getHotelById, hotelID)
	var i Hotel
	err := row.Scan(&i.HotelID, &i.Name, &i.Address)
	return i, err
}

const listHotels = `-- name: ListHotels :many
SELECT hotel_id, name, address FROM hotels LIMIT $1 OFFSET $2
`

type ListHotelsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHotels(ctx context.Context, arg ListHotelsParams) ([]Hotel, error) {
	rows, err := q.db.QueryContext(ctx, listHotels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hotel
	for rows.Next() {
		var i Hotel
		if err := rows.Scan(&i.HotelID, &i.Name, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHotel = `-- name: UpdateHotel :one
UPDATE hotels
SET name = $2, address = $3
WHERE hotel_id = $1
RETURNING hotel_id, name, address
`

type UpdateHotelParams struct {
	HotelID uuid.UUID `json:"hotel_id"`
	Name    string    `json:"name"`
	Address string    `json:"address"`
}

func (q *Queries) UpdateHotel(ctx context.Context, arg UpdateHotelParams) (Hotel, error) {
	row := q.db.QueryRowContext(ctx, updateHotel, arg.HotelID, arg.Name, arg.Address)
	var i Hotel
	err := row.Scan(&i.HotelID, &i.Name, &i.Address)
	return i, err
}
