// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearExpiredSessions = `-- name: ClearExpiredSessions :exec
DELETE FROM sessions WHERE expires_at <= NOW() OR is_active = FALSE
`

func (q *Queries) ClearExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearExpiredSessions)
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (session_id, user_id, expires_at)
VALUES ($1, $2, $3)
RETURNING session_id
`

type CreateSessionParams struct {
	SessionID uuid.UUID `json:"session_id"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.SessionID, arg.UserID, arg.ExpiresAt)
	var session_id uuid.UUID
	err := row.Scan(&session_id)
	return session_id, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT session_id, user_id, expires_at, is_active FROM sessions WHERE session_id = $1
`

func (q *Queries) GetSessionById(ctx context.Context, sessionID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionById, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT session_id, user_id, expires_at, is_active FROM sessions WHERE user_id = $1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByUserId, userID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}
