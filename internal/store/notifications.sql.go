// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (message, roles, user_id)
VALUES ($1, $2, $3)
`

type CreateNotificationParams struct {
	Message string        `json:"message"`
	Roles   []string      `json:"roles"`
	UserID  uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification, arg.Message, pq.Array(arg.Roles), arg.UserID)
	return err
}

const getNotifications = `-- name: GetNotifications :many
SELECT notification_id, message, roles, user_id, is_active
FROM notifications
WHERE $1 = ANY(roles)
`

func (q *Queries) GetNotifications(ctx context.Context, roles []string) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications, pq.Array(roles))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.NotificationID,
			&i.Message,
			pq.Array(&i.Roles),
			&i.UserID,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationStatus = `-- name: UpdateNotificationStatus :exec
UPDATE notifications
SET is_active = $2
WHERE notification_id = $1
RETURNING notification_id, message, roles, user_id, is_active
`

type UpdateNotificationStatusParams struct {
	NotificationID uuid.UUID `json:"notification_id"`
	IsActive       bool      `json:"is_active"`
}

func (q *Queries) UpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateNotificationStatus, arg.NotificationID, arg.IsActive)
	return err
}
