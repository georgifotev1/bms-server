// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (message, roles)
VALUES ($1, $2)
`

type CreateNotificationParams struct {
	Message string   `json:"message"`
	Roles   []string `json:"roles"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification, arg.Message, pq.Array(arg.Roles))
	return err
}

const getNotificationsByUserId = `-- name: GetNotificationsByUserId :many
SELECT
    n.notification_id,
    n.message
FROM notifications n
LEFT JOIN user_notifications un ON
    n.notification_id = un.notification_id AND
    un.user_id = $1
WHERE
    n.is_active = true AND
    (un.read_at IS NULL)
`

type GetNotificationsByUserIdRow struct {
	NotificationID uuid.UUID `json:"notification_id"`
	Message        string    `json:"message"`
}

func (q *Queries) GetNotificationsByUserId(ctx context.Context, userID uuid.UUID) ([]GetNotificationsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsByUserIdRow
	for rows.Next() {
		var i GetNotificationsByUserIdRow
		if err := rows.Scan(&i.NotificationID, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsRead = `-- name: MarkAsRead :exec
INSERT INTO user_notifications (user_id, notification_id, read_at)
VALUES ($1, $2, NOW())
ON CONFLICT (user_id, notification_id)
DO UPDATE SET read_at = NOW()
`

type MarkAsReadParams struct {
	UserID         uuid.UUID `json:"user_id"`
	NotificationID uuid.UUID `json:"notification_id"`
}

func (q *Queries) MarkAsRead(ctx context.Context, arg MarkAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markAsRead, arg.UserID, arg.NotificationID)
	return err
}
