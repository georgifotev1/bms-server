// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const confirmUserRole = `-- name: ConfirmUserRole :exec
UPDATE users
SET role = $2
WHERE user_id = $1
`

type ConfirmUserRoleParams struct {
	UserID uuid.UUID `json:"user_id"`
	Role   string    `json:"role"`
}

func (q *Queries) ConfirmUserRole(ctx context.Context, arg ConfirmUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, confirmUserRole, arg.UserID, arg.Role)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name, last_name, email, password, role)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Password  []byte `json:"password"`
	Role      string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, first_name, last_name, email, password, role, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, first_name, last_name, email, password, role, created_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
