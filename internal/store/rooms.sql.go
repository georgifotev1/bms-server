// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rooms.sql

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (hotel_id, room_number, type, price_per_night, is_available)
VALUES ($1, $2, $3, $4, $5)
RETURNING room_id, hotel_id, room_number, type, price_per_night, is_available
`

type CreateRoomParams struct {
	HotelID       uuid.NullUUID `json:"hotel_id"`
	RoomNumber    int32         `json:"room_number"`
	Type          string        `json:"type"`
	PricePerNight string        `json:"price_per_night"`
	IsAvailable   sql.NullBool  `json:"is_available"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.HotelID,
		arg.RoomNumber,
		arg.Type,
		arg.PricePerNight,
		arg.IsAvailable,
	)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.HotelID,
		&i.RoomNumber,
		&i.Type,
		&i.PricePerNight,
		&i.IsAvailable,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :one
DELETE FROM rooms WHERE room_id = $1
RETURNING room_id
`

func (q *Queries) DeleteRoom(ctx context.Context, roomID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteRoom, roomID)
	var room_id uuid.UUID
	err := row.Scan(&room_id)
	return room_id, err
}

const getRoomById = `-- name: GetRoomById :one
SELECT room_id, hotel_id, room_number, type, price_per_night, is_available FROM rooms WHERE room_id = $1
`

func (q *Queries) GetRoomById(ctx context.Context, roomID uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomById, roomID)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.HotelID,
		&i.RoomNumber,
		&i.Type,
		&i.PricePerNight,
		&i.IsAvailable,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT room_id, hotel_id, room_number, type, price_per_night, is_available FROM rooms WHERE hotel_id = $1 LIMIT $2 OFFSET $3
`

type ListRoomsParams struct {
	HotelID uuid.NullUUID `json:"hotel_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms, arg.HotelID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.HotelID,
			&i.RoomNumber,
			&i.Type,
			&i.PricePerNight,
			&i.IsAvailable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
SET is_available = $2
WHERE room_id = $1
RETURNING room_id, hotel_id, room_number, type, price_per_night, is_available
`

type UpdateRoomParams struct {
	RoomID      uuid.UUID    `json:"room_id"`
	IsAvailable sql.NullBool `json:"is_available"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, updateRoom, arg.RoomID, arg.IsAvailable)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.HotelID,
		&i.RoomNumber,
		&i.Type,
		&i.PricePerNight,
		&i.IsAvailable,
	)
	return i, err
}
