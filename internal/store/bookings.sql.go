// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookings.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (room_id, check_in_date, check_out_date, total_price, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING booking_id, room_id, check_in_date, check_out_date, total_price, status
`

type CreateBookingParams struct {
	RoomID       uuid.NullUUID `json:"room_id"`
	CheckInDate  time.Time     `json:"check_in_date"`
	CheckOutDate time.Time     `json:"check_out_date"`
	TotalPrice   string        `json:"total_price"`
	Status       string        `json:"status"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.RoomID,
		arg.CheckInDate,
		arg.CheckOutDate,
		arg.TotalPrice,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.RoomID,
		&i.CheckInDate,
		&i.CheckOutDate,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :one
DELETE FROM bookings WHERE booking_id = $1
RETURNING booking_id
`

func (q *Queries) DeleteBooking(ctx context.Context, bookingID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteBooking, bookingID)
	var booking_id uuid.UUID
	err := row.Scan(&booking_id)
	return booking_id, err
}

const getBookingById = `-- name: GetBookingById :one
SELECT booking_id, room_id, check_in_date, check_out_date, total_price, status FROM bookings WHERE booking_id = $1
`

func (q *Queries) GetBookingById(ctx context.Context, bookingID uuid.UUID) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingById, bookingID)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.RoomID,
		&i.CheckInDate,
		&i.CheckOutDate,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}

const listBookingsByHotel = `-- name: ListBookingsByHotel :many
SELECT
    b.booking_id,
    b.room_id,
    b.check_in_date,
    b.check_out_date,
    b.total_price,
    b.status,
    r.room_number,
    r.type AS room_type,
    h.hotel_id,
    h.name AS hotel_name,
    h.address AS hotel_address
FROM bookings b
JOIN rooms r ON b.room_id = r.room_id
JOIN hotels h ON r.hotel_id = h.hotel_id
WHERE h.hotel_id = $1
`

type ListBookingsByHotelRow struct {
	BookingID    uuid.UUID     `json:"booking_id"`
	RoomID       uuid.NullUUID `json:"room_id"`
	CheckInDate  time.Time     `json:"check_in_date"`
	CheckOutDate time.Time     `json:"check_out_date"`
	TotalPrice   string        `json:"total_price"`
	Status       string        `json:"status"`
	RoomNumber   int32         `json:"room_number"`
	RoomType     string        `json:"room_type"`
	HotelID      uuid.UUID     `json:"hotel_id"`
	HotelName    string        `json:"hotel_name"`
	HotelAddress string        `json:"hotel_address"`
}

func (q *Queries) ListBookingsByHotel(ctx context.Context, hotelID uuid.UUID) ([]ListBookingsByHotelRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookingsByHotel, hotelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsByHotelRow
	for rows.Next() {
		var i ListBookingsByHotelRow
		if err := rows.Scan(
			&i.BookingID,
			&i.RoomID,
			&i.CheckInDate,
			&i.CheckOutDate,
			&i.TotalPrice,
			&i.Status,
			&i.RoomNumber,
			&i.RoomType,
			&i.HotelID,
			&i.HotelName,
			&i.HotelAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :one
UPDATE bookings
SET status = $2
WHERE room_id = $1
RETURNING booking_id, room_id, check_in_date, check_out_date, total_price, status
`

type UpdateBookingParams struct {
	RoomID uuid.NullUUID `json:"room_id"`
	Status string        `json:"status"`
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBooking, arg.RoomID, arg.Status)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.RoomID,
		&i.CheckInDate,
		&i.CheckOutDate,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}
